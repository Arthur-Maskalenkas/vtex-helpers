import { FilterListAttributesCtxReturn } from 'remap-schema/utils'

import {
  RefinedDataOnProductContext,
  schema_site_editor_default_collection_flags,
  schema_site_editor_default_containerConfigsOfLinksPresentsOnProductContext,
  schema_site_editor_default_container_generic_quadrant,
  schema_site_editor_default_linkField,
  schema_site_editor_default_linkField_filtered
} from '../../src/remap-schema/_interfaces'

const compare = (value?: any): string => {
  if (!value) {
    return ''
  }

  return String(value)?.toString()?.toLowerCase()
}
export class FilterDefaultSchema {
  constructor (
    private readonly refinedDataOnProductContext: RefinedDataOnProductContext,
    private readonly showLogs?: boolean
  ) { }

  private readonly validCollections = []

  private theLinksPresentsInThisProductContextByProduct (link: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField {
    const match = link?.find(currentLink => compare(currentLink?.__editorItemTitle) === compare(this.refinedDataOnProductContext?.productId))

    if (!match) return null

    return match
  }

  private theLinksPresentsInThisProductContextByBrand (link: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField {
    const match = link?.find(currentLink => compare(currentLink?.__editorItemTitle) === compare(this.refinedDataOnProductContext?.brandId))

    if (!match) return null

    return match
  }

  private theLinksPresentsInThisProductContextByCollections (links: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField[] {
    const listOfMatchs = links.filter(link => {
      const refinedDataOnProductCtx = this.refinedDataOnProductContext?.listOfCollections

      const match = refinedDataOnProductCtx
        ?.find(refinedData => {
          return compare(refinedData?.id) === compare(link?.__editorItemTitle)
        })

      if (!match) return false

      return true
    })

    if (listOfMatchs.length === 0) return null

    return listOfMatchs
  }

  private theLinksPresentsInThisProductContextByProductField (links: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField[] {
    const listOfMatchs = links.filter(link => {
      const refinedDataOnProductCtx = this.refinedDataOnProductContext?.listOfProductFields

      const matchName = refinedDataOnProductCtx
        ?.find(refinedData => {
          return compare(refinedData?.name) === compare(link?.__editorItemTitle)
        })

      const matchValue = matchName?.values?.find(value => compare(value) === compare(link?.extraCampToFilter_1))

      return Boolean(!!matchValue && !!matchName)
    })

    if (listOfMatchs.length === 0) return null

    return listOfMatchs
  }

  private theLinksPresentsInThisProductContextByVariations (links: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField[] {
    const listOfMatchs = links.filter(link => {
      const refinedDataOnProductCtx = this.refinedDataOnProductContext?.listOfVariations

      const matchName = refinedDataOnProductCtx
        ?.find(refinedData => {
          return compare(refinedData?.name) === compare(link?.__editorItemTitle)
        })

      const matchValue = matchName?.values?.find(value => compare(value) === compare(link?.extraCampToFilter_1))

      return Boolean(!!matchValue && !!matchName)
    })

    if (listOfMatchs.length === 0) return null

    return listOfMatchs
  }

  private theLinksPresentsInThisProductContextByCategoryId (link: schema_site_editor_default_linkField[]): schema_site_editor_default_linkField {
    const match = link?.find(currentLink => compare(currentLink?.__editorItemTitle) === compare(this.refinedDataOnProductContext?.categoryId))

    if (!match) return null

    return match
  }

  // vai receber uma coleção (nela tem vinculações, prioridades e etc)
  // vai receber um contexto de produto (nesse contexto tem o id do produto, categoria, marca, etc)
  // vai procurar no contexto de produto todas as vinculações que estão na coleção. Caso encontre, vai retornar a coleção, e caso não encontre, vai retornar null
  public filterCollection (collection: schema_site_editor_default_collection_flags, showLogs: boolean = false): schema_site_editor_default_linkField_filtered | null {
    // criar uma variavel para iterar os matchs ao final. Ter a quantidade de matchs, e caso seja 0, retornar null. tanbém ter o html global como variante e etc..

    if (!this.refinedDataOnProductContext || !collection) return null

    const { _containerConfigsOfLinksPresentsOnProductContext, ...currentCollectionData } = collection

    const linksInsideThisCollection = collection._containerConfigsOfLinksPresentsOnProductContext?.[0]

    const linksFiltereds: any = Object.keys(linksInsideThisCollection).map((key: keyof schema_site_editor_default_containerConfigsOfLinksPresentsOnProductContext) => {
      const currentLink = linksInsideThisCollection[key] as schema_site_editor_default_linkField[]
      if (!currentLink || !Array.isArray(currentLink) || currentLink?.length === 0 || key === '__editorItemTitle') return [null]

      const matchLinkOnRefined = this?.[key](currentLink)

      if (!matchLinkOnRefined) return null

      return {
        ...currentCollectionData
      } as schema_site_editor_default_collection_flags
    })

    if (linksFiltereds?.length === 0 || linksFiltereds?.every(link => link === null)) return null

    // talvez nem precise adicionar o html aqui, ja que vai ser remapeado. Talvez um filter retornando verdadeiro falso ja basta
    return linksFiltereds
  }
}