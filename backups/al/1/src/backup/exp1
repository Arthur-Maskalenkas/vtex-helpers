const resolver = 'theLinksPresentsInThisProductContextByProduct'
const propertieTolinkOnProductContext: keyof RefinedDataOnProductContext = 'productId'
const propertieToHTMLMatchBy = 'product-attr'

it('Should filter all links on linksByProductAttr and return collection if any match occurs ', () => {
  const mock_value_1 = '1'
  const mock_value_2 = '2'

  const mock_result = generateMockResult(propertieToHTMLMatchBy, { type: 'value', value: mock_value_1 })

  const mock_links = [generateMockLink(mock_value_1, propertieTolinkOnProductContext), generateMockLink(mock_value_2, propertieTolinkOnProductContext)]
  const mock_refined_data = generateMockRefinedDataOnProductContext({ [propertieTolinkOnProductContext]: mock_value_1 })
  const mock_param_collection = generateMockParamCollection(resolver, mock_links, mock_result)

  const { sut } = makeSut(mock_refined_data)

  const result = sut.filterCollection(mock_param_collection)

  expect(result).toEqual(mock_result)
})